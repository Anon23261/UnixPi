from typing import Any, Dict, Iterator, List, Optional, Tuple, Union

def process_iter(attrs: Optional[List[str]] = None) -> Iterator["Process"]: ...
def virtual_memory() -> Any: ...
def disk_partitions() -> List[Any]: ...
def disk_usage(path: str) -> Any: ...
def net_connections() -> List[Any]: ...
def net_if_stats() -> Dict[str, Any]: ...
def cpu_percent(interval: Optional[float] = None) -> float: ...
def cpu_count() -> int: ...
def sensors_temperatures() -> Dict[str, List[Any]]: ...

class Process:
    def __init__(self, pid: Optional[int] = None) -> None: ...
    @property
    def info(self) -> Dict[str, Any]: ...
    def name(self) -> str: ...
    def username(self) -> str: ...
    def cmdline(self) -> List[str]: ...
    def status(self) -> str: ...
    def cpu_percent(self) -> float: ...
    def memory_info(self) -> Any: ...
    def memory_percent(self) -> float: ...
    def connections(self) -> List[Any]: ...

class NoSuchProcess(Exception): ...
class AccessDenied(Exception): ...
